concentrate on understanding where rule is defined in existing system
add main method and run application


off-peak charges (pence/minute):
business: 0.18
leisure: 0.06
standard: 0.12

peak charges (pence/minute):
business: 0.18
leisure: 0.48
standard: 0.30

test 0.04 seconds, currently not charged

wrote a nearly end-to-end FitNesse test
had to redirect System.out!
fixed the times!
failed on jenkins due to newline char being different, so disabled it on CI, but still passed locally
introduced seam, changed so that call time could be injected into call event, able to test
gets tariff for each customer inside call loop, inefficient, call it from outside
injected billgenerator interface, different way of showing the bill/receipt
order calls by start time then duration on the bill! BillGenerator purpose, e.g. grouping, shows how portion of call was charged
created new test using mocking of billgenerator, customerdb, tarifflib
billgenerator does not need string totalBill as lineitems has this already! move calc total bill to billgenerator
still use callinit and call complete, still with fixed times
but needed to add equals and hashcode to lineitem, call, callevent for verifying billgen send, also better than comparing primitives
added tests for equals in lineitem, call, callevent
broke up createBillForCustomer into a number of methods such as getCallsFor(customer), calculateCostOfEachCall, calculateTotalBill, able to sense values
introduce CallLogger with getCallsFor(customer)
noticed calls are synchronous, system doesn't allow simultaneous calls, need to check requirements but kept behaviour the same, added test to check this
callLogger injected into BillingSystem, e.g. can have async call logger
separate out BillCalculator, rules could change in the future
tests for BillCalculators only used one of the tariffs, the acceptance test cover all cases
add Fixed (old requirements) and Variable (new requirements) calculator
changed daytimepeakperiod to return datetime of next peak time change
peakperiod logic unchanged, still using existing peak off-peak function, injected into calculator
BillCalculator use setter injection and default to variable rate!
refactored structure into three main packages (billing, calls, printing), removed cyclic dependency between billsystem and billgenerator
billgenerator not ordered, check requirements with user
integration test for BillGenerator used HtmlPrinter, again redirect sysout, refactored to inject dependency, removed the totalCost argument
todo: Customer builder with tinytypes for firstname, lastname, number
todo: CallEvent builder with tinytypes

findbugs
jdepend?

ports and adapters, especially around the customer and tariff db!!
CallEvent map?


use JodaTime
for DSLs we used mockito, joda time, hamcrest, our own, suggest one for query CallLogger
=======
findbugs
jdepend?
jbehave
